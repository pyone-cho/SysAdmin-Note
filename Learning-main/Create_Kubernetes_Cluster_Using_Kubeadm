##Create Kubernates Cluster Using Kubeadm On Virtual Box
1. Set Hostnames (On Both Master & Workers)
	sudo hostnamectl set-hostname k8smaster (On Master)
	sudo hostnamectl set-hostname k8sworker1 (On Worker1)
	sudo hostnamectl set-hostname k8sworker2 (On Worker2)
	
2. Assign Static IP (On Both Master & Workers)
	nmcli con
	vi /etc/sysconfig/network-scripts/ifcfg-ens33
		TYPE="Ethernet"
		PROXY_METHOD="none"
		BROWSER_ONLY="no"
		BOOTPROTO="none"
		IPADDR=192.168.0.107 //(on worker1 192.168.0.108, workers2 192.168.0.109)
		PREFIX=24
		GATEWAY=192.168.0.1
		DNS1=192.168.2.254
		DNS2=8.8.8.8
		DNS3=8.8.4.4
		DEFROUTE="yes"
		IPV4_FAILURE_FATAL="no"
		IPV6INIT="no"
		IPV6_AUTOCONF="no"
		IPV6_DEFROUTE="no"
		IPV6_FAILURE_FATAL="no"
		IPV6_ADDR_GEN_MODE="stable-privacy"
		NAME="ens33"
		UUID=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
		DEVICE="ens33"
		NOBOOT="yes"
	systemctl restart network
	
3. Edit /etc/hosts file (On Both Master & Workers)
	cat <<EOF> /etc/hosts
	
	192.168.0.107 k8smaster
	192.168.0.108 k8sworker1
	192.168.0.109 k8smaster2
	
	EOF
	
	cat /etc/hosts
	
4. Disable SELinux (On Both Master & Workers)
	setenforce 0
	sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disable/g' /etc/sysconfig/selinux
	
5. Disable firewall and edit Iptables settings (On Both Master & Workers)
	systemctl disable firewalld
	modprobe br_netfilter
	echo '1'> /proc/sys/net/bridge/bridge-nf-call-iptables
	
6. Setup Kubernates Repo (On Both Master & Workers)
	cat <<EOF > /etc/yum.repos.d/kubernetes.repo
	[kubernetes]
	name=Kubernetes
	baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
	enabled=1
	gpgcheck=1
	repo_gpgcheck=0
	gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
	exclude=kube*
	EOF
	
7. Installing Kubeadm and Docker, Enable and start the services (On Both Master & Workers)
	yum install kubeadm docker -y
	systemctl enable kubelet
	systemctl start kubelet
	systemctl enable docker
	systemctl start docker
	
8. Disable Swap (On Both Master & Workers)
	swapoff -a
	vi /etc/fstab 
	comment the line with Swap keyword

9. Initialize Kubernates Cluster (Only master)
	kubeadm init
	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config
	kubectl get nodes //show nodes command
		
9. Installing Pod Network using Calico network (Only master)
	curl https://docs.projectcalico.org/manifests/calico.yaml -O
	kubectl apply -f calico.yaml
	kubectl get pod -n kube-system
	sudo firewall-cmd --add-port=6443/tcp --permanent
	sudo friewall-cmd --reload
	
10. Join Woker Nodes (Only Workers)
	kubeadm join 192.168.0.xxx:6443 --token xxx --discovery-token-ca-cert-hash sha256:xx

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


Need Security Group
Control plane
Protocol	Direction	Port Range	Purpose				Used By
TCP		Inbound	6443			Kubernetes API server	All
TCP		Inbound	2379-2380		etcd server client API	kube-apiserver, etcd
TCP		Inbound	10250		Kubelet API			Self, Control plane
TCP		Inbound	10259		kube-scheduler			Self
TCP		Inbound	10257		kube-controller-manager	Self
http 80 0.0.0.0
https 443 0.0.0.0

Worker node(s)
Protocol	Direction	Port Range	Purpose			Used By
TCP		Inbound	10250		Kubelet API		Self, Control plane
TCP		Inbound	30000-32767	NodePort Servicesâ€ 	All

##Create Kubernates Cluster Using Kubeadm On AWS (AMAZON Linux)
1. Set Hostnames (On Both Master & Workers)
	sudo hostnamectl set-hostname k8smaster (On Master)
	sudo hostnamectl set-hostname k8sworker1 (On Worker1)
	sudo hostnamectl set-hostname k8sworker2 (On Worker2)
	
2. Disable Swap (On Both Master & Workers)
	sudo su
	yum update -y
	swapoff -a

3. Letting iptables see bridged traffic (On Both Master & Workers)
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

4. Install Docker Engine (On Both Master & Workers)
yum install docker -y

mkdir /etc/docker
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

systemctl enable docker && systemctl daemon-reload && systemctl restart docker

5. Installing kubeadm, kubelet and kubectl (On Both Master & Workers)
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

6. Disable SELinux (On Both Master & Workers)
# Set SELinux in permissive mode (effectively disabling it)
setenforce 0
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

7. Install Kubelet and Kubectl (On Both Master & Workers)
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet
	
8. Configuring a cgroup driver (On Both Master & Workers)
vi kubeadm-config.yaml
# kubeadm-config.yaml
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: v1.22.0
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd

--------------------------------------------------------------------------------------

9. Initialize Kubernates Cluster (Only master)
	kubeadm init --config kubeadm-config.yaml --ignore-preflight-errors=all
	exit
	mkdir -p $HOME/.kube
	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	sudo chown $(id -u):$(id -g) $HOME/.kube/config
	kubectl get nodes //show nodes command
	
	
	
10. Join Woker Nodes (Only Workers)
	kubeadm join 172.31.23.205:6443 --token w8oqel.er7lqkxx63dhxszy \
	--discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx --ignore-preflight-errors=all
	//export KUBECONFIG=/etc/kubernetes/kubelet.conf (show kublet.conf on master)
	kubectl get nodes
	
11. Testing (only master)
	$ kubectl get pods --all-namespaces
	$ kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
	
	
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/	 


https://www.zekelabs.com/blog/how-to-install-kubernetes-cluster-on-aws-ec2-instances/

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
